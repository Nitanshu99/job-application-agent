# Alembic Configuration File for Job Automation System
#
# This file contains the configuration for Alembic database migrations.
# Alembic is used to manage database schema changes and version control
# for the PostgreSQL database used by the job automation system.
#
# Features:
# - Database schema versioning and migration
# - Support for multiple environments (dev, staging, production)
# - Automatic migration script generation
# - Rollback and upgrade capabilities
# - Data migration support
#
# Usage:
#   # Create a new migration
#   alembic revision --autogenerate -m "Add user table"
#   
#   # Apply migrations
#   alembic upgrade head
#   
#   # Rollback migrations
#   alembic downgrade -1
#   
#   # View migration history
#   alembic history

[alembic]
# Path to migration scripts
script_location = backend/alembic

# Template used to generate migration scripts
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# Timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# Max length of characters to apply to the "slug" field
# of the revision filename. Truncates slug to this length.
# truncate_slug_length = 40

# Set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# Set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# Version location specification; This defaults
# to backend/alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/baz

# Version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# The output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Database URL configuration
# The sqlalchemy.url is read from environment variables or can be set directly
# For production, use environment variable: DATABASE_URL
# For development: postgresql://user:password@localhost:5432/jobautomation
sqlalchemy.url = postgresql://postgres:postgres@localhost:5432/jobautomation

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Migration environment configuration
[alembic:exclude_tables]
# Tables to exclude from autogenerate migrations
# Example: spatial_ref_sys,geometry_columns

[alembic:context]
# Custom context configuration
# Can be used to set transaction isolation level, etc.

# Production environment overrides
[production]
sqlalchemy.url = ${DATABASE_URL}

# Development environment overrides  
[development]
sqlalchemy.url = postgresql://postgres:postgres@localhost:5432/jobautomation_dev

# Testing environment overrides
[testing]
sqlalchemy.url = postgresql://test:test@localhost:5432/test_jobautomation

# Staging environment overrides
[staging]
sqlalchemy.url = postgresql://staging:staging@staging-db:5432/jobautomation_staging

# Docker environment overrides
[docker]
sqlalchemy.url = postgresql://postgres:postgres@db:5432/jobautomation

# Migration script configuration
[revision_environment]
# Set to 'true' to run the environment during the 'revision' command
revision_environment = false

# Autogenerate configuration
[autogenerate]
# Set to 'true' to render item names in migration scripts
render_item_names = true

# Set to 'true' to compare types during autogenerate
compare_type = true

# Set to 'true' to compare server defaults during autogenerate  
compare_server_default = true

# Custom configuration for job automation system
[job_automation]
# Schema name for the application (if using schema separation)
schema_name = public

# Enable data migration support
enable_data_migrations = true

# Migration batch size for large datasets
migration_batch_size = 1000

# Backup before migration (production safety)
backup_before_migration = true

# Post-migration verification
verify_migration = true

# Custom migration template directory
custom_templates = backend/alembic/templates